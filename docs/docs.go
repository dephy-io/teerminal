// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/attestation/appkey": {
            "get": {
                "description": "Get app derived key for current (simulated) tee version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "attestation"
                ],
                "summary": "Get app derived key for current (simulated) tee version",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.ApplicationKey"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/attestation/sign": {
            "post": {
                "description": "Sign with app derived key for current (simulated) tee version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "attestation"
                ],
                "summary": "Sign with app derived key for current (simulated) tee version",
                "parameters": [
                    {
                        "description": "Data to be signed",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/web.SignRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.SignResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/device/key": {
            "get": {
                "description": "Get device key for current (simulated) tee version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device"
                ],
                "summary": "Get device key for current (simulated) tee version",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.DeviceKey"
                        }
                    }
                }
            }
        },
        "/api/v1/device/sign": {
            "post": {
                "description": "Get device enrollment key for current (simulated) tee version\nPlease see also the DePhy evm sdk.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device"
                ],
                "summary": "Get device enrollment key for current (simulated) tee version",
                "parameters": [
                    {
                        "description": "Data to be signed",
                        "name": "signRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/web.SignRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.Enrollment"
                        }
                    }
                }
            }
        },
        "/api/v1/device/version": {
            "get": {
                "description": "Get version attestation for current (simulated) tee version",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device"
                ],
                "summary": "Get version attestation for current (simulated) tee version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Remote requester's nonce and signature, serialized as hex(64b nonce || 64b pubKey || 65b signature), in which signature is the signature of nonce || pubKey, if signature not provided, omit signature",
                        "name": "attestation",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.Attestation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/kv/delete": {
            "delete": {
                "description": "Delete a key-value pair",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "kv"
                ],
                "summary": "Delete a key-value pair",
                "parameters": [
                    {
                        "description": "Request to delete",
                        "name": "DeleteRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/web.DeleteKvRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.WriteKvResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/kv/quota": {
            "get": {
                "description": "Get the quota of the current application, return the number of keys that can be written",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "kv"
                ],
                "summary": "Get the quota of the current application",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.QuotaResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/kv/read": {
            "get": {
                "description": "Read a key-value pair, If the target key is protected, the protector must be provided.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "kv"
                ],
                "summary": "Read a key-value pair",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.ReadKvResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/kv/write": {
            "post": {
                "description": "Write a key-value pair, If Provision is provided, the remote provision information will be added, and only the provisioner can write it, If Protected is provided, the target key will be protected, and only the protector can read it.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "kv"
                ],
                "summary": "Write a key-value pair",
                "parameters": [
                    {
                        "description": "Key",
                        "name": "keyInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/web.WriteKvRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/web.WriteKvResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/web.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "web.ApplicationKey": {
            "type": "object",
            "properties": {
                "appCert": {
                    "type": "string"
                },
                "appPubKey": {
                    "type": "string"
                }
            }
        },
        "web.Attestation": {
            "type": "object",
            "properties": {
                "attestationVer": {
                    "type": "string"
                },
                "deviceCert": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                },
                "teePlatformVer": {
                    "type": "integer"
                }
            }
        },
        "web.DeleteKvRequest": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                }
            }
        },
        "web.DeviceKey": {
            "type": "object",
            "properties": {
                "deviceCert": {
                    "type": "string"
                },
                "devicePubKey": {
                    "type": "string"
                }
            }
        },
        "web.Enrollment": {
            "type": "object",
            "properties": {
                "deviceKey": {
                    "type": "string"
                },
                "payload": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                }
            }
        },
        "web.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "web.QuotaResponse": {
            "type": "object",
            "properties": {
                "quota": {
                    "type": "integer"
                },
                "used": {
                    "type": "integer"
                }
            }
        },
        "web.ReadKvResponse": {
            "type": "object",
            "properties": {
                "present": {
                    "description": "Present is the flag to indicate if the key exists",
                    "type": "boolean"
                },
                "protected": {
                    "description": "Protected is the flag to indicate if the key is protected",
                    "type": "boolean"
                },
                "protector": {
                    "description": "Protector is the protector of the key, if any",
                    "type": "string"
                },
                "provisioned": {
                    "description": "Provisioned is the flag to indicate if the key is provisioned",
                    "type": "boolean"
                },
                "provisioner": {
                    "description": "Provisioner is the provisioner of the key, if any",
                    "type": "string"
                },
                "value": {
                    "description": "Value is the value of the key",
                    "type": "string"
                }
            }
        },
        "web.SignRequest": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data is the data to be signed",
                    "type": "string"
                }
            }
        },
        "web.SignResponse": {
            "type": "object",
            "properties": {
                "pubKey": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                }
            }
        },
        "web.WriteKvRequest": {
            "type": "object",
            "properties": {
                "key": {
                    "description": "Key is the key to write",
                    "type": "string"
                },
                "overwrite": {
                    "description": "Overwrite is the flag to overwrite the existing key, default is false",
                    "type": "boolean"
                },
                "protected": {
                    "description": "Protected is the protector information, leave empty if not needed",
                    "type": "string"
                },
                "provision": {
                    "description": "Provision is the provision information, leave empty if not needed",
                    "type": "string"
                },
                "value": {
                    "description": "Value is the value to write",
                    "type": "string"
                }
            }
        },
        "web.WriteKvResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
